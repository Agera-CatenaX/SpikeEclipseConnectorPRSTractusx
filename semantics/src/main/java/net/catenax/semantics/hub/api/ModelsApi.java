/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package net.catenax.semantics.hub.api;

import net.catenax.semantics.hub.model.Model;
import net.catenax.semantics.hub.model.NewModel;
import org.springframework.core.io.Resource;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-09-01T11:23:27.724046800+02:00[Europe/Berlin]")

@Validated
@Api(value = "models", description = "the models API")
public interface ModelsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /models
     *
     * @param newModel The request body contains all necessary properties to create a new model entry. (required)
     * @return The resulting model entry. (status code 201)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Internal Server Error (status code 500)
     */
    @ApiOperation(value = "", nickname = "createModelWithId", notes = "", response = Model.class, tags={ "SemanticHub", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "The resulting model entry.", response = Model.class),
        @ApiResponse(code = 400, message = "Bad Request"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 500, message = "Internal Server Error") })
    @RequestMapping(value = "/models",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Model> createModelWithId(@ApiParam(value = "The request body contains all necessary properties to create a new model entry." ,required=true )  @Valid @RequestBody NewModel newModel) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"private\" : true, \"name\" : \"name\", \"publisher\" : \"publisher\", \"id\" : \"id\", \"type\" : \"BAMM\", \"version\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /models/{model-id}
     *
     * @param modelId  (required)
     * @return The resource was deleted successfully. (status code 204)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Not Found (status code 404)
     *         or Internal Server Error (status code 500)
     */
    @ApiOperation(value = "", nickname = "deleteModel", notes = "", tags={ "SemanticHub", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "The resource was deleted successfully."),
        @ApiResponse(code = 400, message = "Bad Request"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 404, message = "Not Found"),
        @ApiResponse(code = 500, message = "Internal Server Error") })
    @RequestMapping(value = "/models/{model-id}",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> deleteModel(@ApiParam(value = "",required=true) @PathVariable("model-id") String modelId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /models/{model-id}
     *
     * @param modelId  (required)
     * @return The resulting model entry. (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Not Found (status code 404)
     *         or Internal Server Error (status code 500)
     */
    @ApiOperation(value = "", nickname = "getModelById", notes = "", response = Model.class, tags={ "SemanticHub", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The resulting model entry.", response = Model.class),
        @ApiResponse(code = 400, message = "Bad Request"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 404, message = "Not Found"),
        @ApiResponse(code = 500, message = "Internal Server Error") })
    @RequestMapping(value = "/models/{model-id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Model> getModelById(@ApiParam(value = "",required=true) @PathVariable("model-id") String modelId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"private\" : true, \"name\" : \"name\", \"publisher\" : \"publisher\", \"id\" : \"id\", \"type\" : \"BAMM\", \"version\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /models/{model-id}/documentation
     *
     * @param modelId  (required)
     * @return OK (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Not Found (status code 404)
     *         or Internal Server Error (status code 500)
     */
    @ApiOperation(value = "", nickname = "getModelDocu", notes = "", tags={ "SemanticHub", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 400, message = "Bad Request"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 404, message = "Not Found"),
        @ApiResponse(code = 500, message = "Internal Server Error") })
    @RequestMapping(value = "/models/{model-id}/documentation",
        produces = { "text/html" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Void> getModelDocu(@ApiParam(value = "",required=true) @PathVariable("model-id") String modelId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /models/{model-id}/file
     *
     * @param modelId  (required)
     * @return The raw RDF based model definition. (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Not Found (status code 404)
     *         or Internal Server Error (status code 500)
     */
    @ApiOperation(value = "", nickname = "getModelFile", notes = "", tags={ "SemanticHub", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The raw RDF based model definition."),
        @ApiResponse(code = 400, message = "Bad Request"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 404, message = "Not Found"),
        @ApiResponse(code = 500, message = "Internal Server Error") })
    @RequestMapping(value = "/models/{model-id}/file",
        produces = { "text/turtle" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Void> getModelFile(@ApiParam(value = "",required=true) @PathVariable("model-id") String modelId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /models
     *
     * @param namespaceFilter  (optional)
     * @param nameFilter  (optional)
     * @param isPublic  (optional)
     * @param type  (optional)
     * @param pageSize  (optional)
     * @param page  (optional)
     * @return A list of models, matching the provided filter options. (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Internal Server Error (status code 500)
     */
    @ApiOperation(value = "", nickname = "getModelList", notes = "", response = Model.class, responseContainer = "List", tags={ "SemanticHub", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "A list of models, matching the provided filter options.", response = Model.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad Request"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 500, message = "Internal Server Error") })
    @RequestMapping(value = "/models",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<Model>> getModelList(@ApiParam(value = "") @Valid @RequestParam(value = "namespaceFilter", required = false) String namespaceFilter,@ApiParam(value = "") @Valid @RequestParam(value = "nameFilter", required = false) String nameFilter,@ApiParam(value = "") @Valid @RequestParam(value = "isPublic", required = false) Boolean isPublic,@ApiParam(value = "", allowableValues = "BAMM, OWL") @Valid @RequestParam(value = "type", required = false) String type,@ApiParam(value = "", allowableValues = "10, 50, 100") @Valid @RequestParam(value = "pageSize", required = false) Integer pageSize,@ApiParam(value = "") @Valid @RequestParam(value = "page", required = false) Integer page) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"private\" : true, \"name\" : \"name\", \"publisher\" : \"publisher\", \"id\" : \"id\", \"type\" : \"BAMM\", \"version\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /models/{model-id}/diagram
     *
     * @param modelId  (required)
     * @return OK (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Not Found (status code 404)
     *         or Internal Server Error (status code 500)
     */
    @ApiOperation(value = "", nickname = "getModelTree", notes = "", response = Resource.class, tags={ "SemanticHub", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Resource.class),
        @ApiResponse(code = 400, message = "Bad Request"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 404, message = "Not Found"),
        @ApiResponse(code = 500, message = "Internal Server Error") })
    @RequestMapping(value = "/models/{model-id}/diagram",
        produces = { "image/png" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Resource> getModelTree(@ApiParam(value = "",required=true) @PathVariable("model-id") String modelId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /models/{model-id}
     *
     * @param modelId  (required)
     * @param newModel The request body contains the updated model. (required)
     * @return The resulting model entry. (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Not Found (status code 404)
     *         or Internal Server Error (status code 500)
     */
    @ApiOperation(value = "", nickname = "modifyModel", notes = "", response = Model.class, tags={ "SemanticHub", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The resulting model entry.", response = Model.class),
        @ApiResponse(code = 400, message = "Bad Request"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 404, message = "Not Found"),
        @ApiResponse(code = 500, message = "Internal Server Error") })
    @RequestMapping(value = "/models/{model-id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Model> modifyModel(@ApiParam(value = "",required=true) @PathVariable("model-id") String modelId,@ApiParam(value = "The request body contains the updated model." ,required=true )  @Valid @RequestBody NewModel newModel) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"private\" : true, \"name\" : \"name\", \"publisher\" : \"publisher\", \"id\" : \"id\", \"type\" : \"BAMM\", \"version\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
