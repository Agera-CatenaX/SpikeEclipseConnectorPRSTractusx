# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- add-dsconnector-deployment

resources:
- repo: self

variables:

  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '3ea078d5-cddc-4e65-b0e7-f1b82c7339d0'
  imageRepository: 'dsconnector'
  containerRegistry: 'catenaxdevacr.azurecr.io'
  dockerfilePath: './connector/Dockerfile'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'catenaxdevacr10283c4a-auth'

  NAMESPACE: centralconnector

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

  # connector vars
  KEYSTOREFILENAME: 'ms-dc-idsos-keystore'
  KEYSTOREPASSWORD: 'mspass'
  DB_SECRET_NAME: 'postgres-password'


stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Provisioning@0
      displayName: 'provision variables'
    - bash: |
        sed -i -e "s%__KEYSTOREPASSWORD__%${KEYSTOREPASSWORD}%g" ./connector/src/main/resources/application.properties
        sed -i -e "s%__KEYSTOREFILENAME__%${KEYSTOREFILENAME}%g" ./connector/src/main/resources/application.properties
        sed -i -e "s%__KEYSTOREFILENAME__%${KEYSTOREFILENAME}%g" ./connector/src/main/resources/conf/config.json
      failOnStderr: true

    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)


- stage: Deploy postgres
  displayName: Deploy postgres
  jobs:
  - job: Create postgres secret
    displayName: Create postgres secret
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Check-secret-or-create@0
      displayName: 'Check secret'
    - bash: |
        echo "Check if kube secret with db password exists and create if not"
      
        if kubectl -n $NAMESPACE get secret "$DB_SECRET_NAME"; then
          echo "Secret exists. Exiting..."
          exit 0
        fi
        DB_PASS=$(tr -dc A-Za-z0-9 </dev/urandom | head -c 13 ; echo '')
        kubectl -n $NAMESPACE create secret generic "$DB_SECRET_NAME" \
          --from-literal=db_user=connector --from-literal=db_pass=$DB_PASS
      failOnStderr: true

  - job: Deploy postgres
    displayName: Deploy postgres
    dependsOn: 'Create postgres secret'
    condition: eq(variables['DEPLOY_POSTGRES'], 'true')
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Deploy-postgres@0
      displayName: 'Deploy postgres'
    - bash: |  
        sed -i -e "s%__SED_SECRET_NAME__%${DB_SECRET_NAME}%g" ./connector/infrastructure/postgres/values.yaml
        helm upgrade --install -n "${NAMESPACE}" -f ./connector/infrastructure/postgres/values.yaml postgres ./connector/infrastructure/postgres
      failOnStderr: true

- stage: Deploy DSC
  displayName: Deploy DSC
  jobs:
  - job: Deploy dataspaceconnector
    displayName: Deploy dataspaceconnector
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Deploy-DSC@0
      displayName: 'Deploy dataspaceconnector'
    - bash: |  
        sed -i -e "s%__IMAGE_TAG__%${tag}%g" ./connector/infrastructure/dataspaceconnector/values.yaml
        sed -i -e "s%__DOCKER_REGISTRY__%${containerRegistry}%g" ./connector/infrastructure/dataspaceconnector/values.yaml
        helm upgrade --install -n "${NAMESPACE}" -f ./connector/infrastructure/dataspaceconnector/values.yaml dataspaceconnector ./connector/infrastructure/dataspaceconnector
      failOnStderr: true